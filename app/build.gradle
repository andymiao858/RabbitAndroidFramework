apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

android {

    signingConfigs {
        debug {
            storeFile file('keystore/debug.keystore')
        }

        release {}
    }

    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "com.rabbit.framework"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "1.0.0"
        buildConfigField('String', 'API_VERSION', '\"v' + versionName + '\"')
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [
                UMENG_APP_KEY   : UMENG_APP_KEY,
                GETUI_APP_ID    : GETUI_APP_ID,
                GETUI_APP_KEY   : GETUI_APP_KEY,
                GETUI_APP_SECRET: GETUI_APPSECRET,
                PACKAGE_NAME    : applicationId

        ]
    }

    packagingOptions{
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    buildTypes {

        debug {
            multiDexEnabled true
            jniDebuggable true
            manifestPlaceholders = ['APP_NAME': 'Rabbit-Debug']
            buildConfigField('com.rabbit.framework.config.PhaseEnum', 'PHASE', 'com.rabbit.framework.config.PhaseEnum.ALPHA')
            buildConfigField('int', 'LOG_LEVEL', 'android.util.Log.VERBOSE')
            signingConfig signingConfigs.debug
        }

        alpha {
            multiDexEnabled true
            manifestPlaceholders = ['APP_NAME': 'Rabbit-α']
            buildConfigField('com.rabbit.framework.config.PhaseEnum', 'PHASE', 'com.rabbit.framework.config.PhaseEnum.ALPHA')
            buildConfigField('int', 'LOG_LEVEL', 'android.util.Log.VERBOSE')
            signingConfig signingConfigs.debug
        }

        beta {
            multiDexEnabled true
            manifestPlaceholders = ['APP_NAME': 'Rabbit-β']
            buildConfigField('com.rabbit.framework.config.PhaseEnum', 'PHASE', 'com.rabbit.framework.config.PhaseEnum.BETA')
            buildConfigField('int', 'LOG_LEVEL', 'android.util.Log.VERBOSE')
            signingConfig signingConfigs.debug
        }

        release {
            multiDexEnabled true
            manifestPlaceholders = ['APP_NAME': 'Rabbit']
            buildConfigField('com.rabbit.framework.config.PhaseEnum', 'PHASE', 'com.rabbit.framework.config.PhaseEnum.RELEASE')
            buildConfigField('int', 'LOG_LEVEL', 'android.util.Log.ERROR')
//            minifyEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        yingyongbao {
            manifestPlaceholders = ['FLAVOR': 'yingyongbao']
        }
        m360 {
            manifestPlaceholders = ['FLAVOR': 'm360']
        }

    }

    applicationVariants.all { variant ->
        if (variant.getName() == "yingyongbao") {
            variant.buildConfigField('String', 'FLAVOR', '\"' + variant.getName() + '\"')

        } else if (variant.getName() == "m360") {
            variant.buildConfigField('String', 'FLAVOR', '\"' + variant.getName() + '\"')
        }

        variant.outputs.each { output ->
            def fileName = "rabbit-" + defaultConfig.versionName + "-" + variant.productFlavors[0].name + "-" + variant.buildType.name + ".apk"
            output.packageApplication.outputFile = new File(output.packageApplication.outputFile.parent, fileName)
        }
    }

}


def Properties props = new Properties()
def propFile = rootProject.file('signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))
    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword props['KEY_PASSWORD']
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile project(path: ':android-volley')

    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:design:23.0.1'
    compile 'com.android.support:support-v4:23.0.0'
    compile 'com.android.support:recyclerview-v7:23.0.0'

    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.github.bumptech.glide:glide:3.7.0'
//    compile 'com.github.bumptech.glide:volley-integration:1.4.0@aar'
//    compile 'com.github.bumptech.glide:okhttp3-integration:1.4.0@aar'

    compile 'org.apache.httpcomponents:httpmime:4.5.2'
    compile 'org.apache.httpcomponents:httpcore:4.4.4'

    compile 'com.umeng.analytics:analytics:latest.integration'
    compile 'com.getui:sdk:2.7.0.0'
    compile 'com.getui:ext:2.0.3'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile "org.robolectric:robolectric:3.0"
    testCompile 'com.squareup.okhttp3:mockwebserver:3.0.1'


}
